'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.root = exports.$tree = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = function (cursors, _Component) {

  if (!cursors) {
    throw new Error('invalid cursors');
  }

  if (cursors.tree) {
    exports.$tree = $tree = cursors.tree;
    delete cursors.tree;
  }

  if (typeof cursors === 'function') {
    cursors = cursors();
  }

  var decorator = function decorator(Component) {

    var _cursors = {};
    var _extaProps = {};

    if (cursors.props) {
      _extaProps = cursors.props;
      delete cursors.props;
    }

    Object.keys(cursors).forEach(function (key) {
      var val = cursors[key];
      if (typeof val === 'string') {
        _cursors[key] = val.split('.');
      } else if (Array.isArray(val)) {
        _cursors[key] = val;
      } else {
        _extaProps[key] = val;
      }
    });

    // console.log('_cursors', _cursors);

    return function (_React$Component) {
      _inherits(BranchedComponent, _React$Component);

      function BranchedComponent(props, context) {
        _classCallCheck(this, BranchedComponent);

        var _this = _possibleConstructorReturn(this, (BranchedComponent.__proto__ || Object.getPrototypeOf(BranchedComponent)).call(this, props, context));

        _this.onUpdate = function () {
          _this.setState(_this._$watcher.get());
        };

        _this.handleRef = function (el) {
          if (el) {
            _this.$component = el;
          }
        };

        _this._$watcher = $tree.watch(_cursors);
        _this.state = _this._$watcher.get();

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = Object.keys(_extaProps)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var key = _step.value;

            var val = _extaProps[key];
            if (typeof val === 'function') {
              _extaProps[key] = val.bind(_this);
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return _this;
      }

      _createClass(BranchedComponent, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
          this._$watcher.on('update', this.onUpdate);
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          this._$watcher.release();
        }
      }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {
          var props = this.props,
              state = this.state;

          for (var keys = Object.keys(_cursors), i = keys.length; i--;) {
            if (nextState[keys[i]] !== state[keys[i]]) {
              return true;
            }
          }

          for (var _keys = Object.keys(nextProps), _i = _keys.length; _i--;) {
            if (nextProps[_keys[_i]] !== props[_keys[_i]]) {
              return true;
            }
          }

          return false;
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2.default.createElement(Component, _extends({}, this.props, this.state, _extaProps, {
            ref: this.handleRef }));
        }
      }]);

      return BranchedComponent;
    }(_react2.default.Component);
  };

  return _Component ? decorator(_Component) : decorator;
};

var _baobab = require('baobab');

var _baobab2 = _interopRequireDefault(_baobab);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var $tree = exports.$tree = null;

var root = exports.root = function root(tree, Component) {

  if (!(tree instanceof _baobab2.default)) {
    throw new Error('tree must be instance of Baobab');
  }

  exports.$tree = $tree = tree;
};